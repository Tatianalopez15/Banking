"""
<<<<<<< HEAD
Settings and configuration for Django.

Read values from the module specified by the DJANGO_SETTINGS_MODULE environment
variable, and then from django.conf.global_settings; see the global_settings.py
for a list of all possible variables.
"""

import importlib
import os
import time
import traceback
import warnings
from pathlib import Path

import django
from django.conf import global_settings
from django.core.exceptions import ImproperlyConfigured
from django.utils.deprecation import RemovedInDjango60Warning
from django.utils.functional import LazyObject, empty

ENVIRONMENT_VARIABLE = "DJANGO_SETTINGS_MODULE"
DEFAULT_STORAGE_ALIAS = "default"
STATICFILES_STORAGE_ALIAS = "staticfiles"

# RemovedInDjango60Warning.
FORMS_URLFIELD_ASSUME_HTTPS_DEPRECATED_MSG = (
    "The FORMS_URLFIELD_ASSUME_HTTPS transitional setting is deprecated."
)


class SettingsReference(str):
    """
    String subclass which references a current settings value. It's treated as
    the value in memory but serializes to a settings.NAME attribute reference.
    """

    def __new__(self, value, setting_name):
        return str.__new__(self, value)

    def __init__(self, value, setting_name):
        self.setting_name = setting_name


class LazySettings(LazyObject):
    """
    A lazy proxy for either global Django settings or a custom settings object.
    The user can manually configure settings prior to using them. Otherwise,
    Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.
    """

    def _setup(self, name=None):
        """
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn't
        configured settings manually.
        """
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = ("setting %s" % name) if name else "settings"
            raise ImproperlyConfigured(
                "Requested %s, but settings are not configured. "
                "You must either define the environment variable %s "
                "or call settings.configure() before accessing settings."
                % (desc, ENVIRONMENT_VARIABLE)
            )

        self._wrapped = Settings(settings_module)

    def __repr__(self):
        # Hardcode the class name as otherwise it yields 'Settings'.
        if self._wrapped is empty:
            return "<LazySettings [Unevaluated]>"
        return '<LazySettings "%(settings_module)s">' % {
            "settings_module": self._wrapped.SETTINGS_MODULE,
        }

    def __getattr__(self, name):
        """Return the value of a setting and cache it in self.__dict__."""
        if (_wrapped := self._wrapped) is empty:
            self._setup(name)
            _wrapped = self._wrapped
        val = getattr(_wrapped, name)

        # Special case some settings which require further modification.
        # This is done here for performance reasons so the modified value is cached.
        if name in {"MEDIA_URL", "STATIC_URL"} and val is not None:
            val = self._add_script_prefix(val)
        elif name == "SECRET_KEY" and not val:
            raise ImproperlyConfigured("The SECRET_KEY setting must not be empty.")

        self.__dict__[name] = val
        return val

    def __setattr__(self, name, value):
        """
        Set the value of setting. Clear all cached values if _wrapped changes
        (@override_settings does this) or clear single values when set.
        """
        if name == "_wrapped":
            self.__dict__.clear()
        else:
            self.__dict__.pop(name, None)
        super().__setattr__(name, value)

    def __delattr__(self, name):
        """Delete a setting and clear it from cache if needed."""
        super().__delattr__(name)
        self.__dict__.pop(name, None)

    def configure(self, default_settings=global_settings, **options):
        """
        Called to manually configure the settings. The 'default_settings'
        parameter sets where to retrieve any unspecified values from (its
        argument must support attribute access (__getattr__)).
        """
        if self._wrapped is not empty:
            raise RuntimeError("Settings already configured.")
        holder = UserSettingsHolder(default_settings)
        for name, value in options.items():
            if not name.isupper():
                raise TypeError("Setting %r must be uppercase." % name)
            setattr(holder, name, value)
        self._wrapped = holder

    @staticmethod
    def _add_script_prefix(value):
        """
        Add SCRIPT_NAME prefix to relative paths.

        Useful when the app is being served at a subpath and manually prefixing
        subpath to STATIC_URL and MEDIA_URL in settings is inconvenient.
        """
        # Don't apply prefix to absolute paths and URLs.
        if value.startswith(("http://", "https://", "/")):
            return value
        from django.urls import get_script_prefix

        return "%s%s" % (get_script_prefix(), value)

    @property
    def configured(self):
        """Return True if the settings have already been configured."""
        return self._wrapped is not empty

    def _show_deprecation_warning(self, message, category):
        stack = traceback.extract_stack()
        # Show a warning if the setting is used outside of Django.
        # Stack index: -1 this line, -2 the property, -3 the
        # LazyObject __getattribute__(), -4 the caller.
        filename, _, _, _ = stack[-4]
        if not filename.startswith(os.path.dirname(django.__file__)):
            warnings.warn(message, category, stacklevel=2)


class Settings:
    def __init__(self, settings_module):
        # update this dict from global settings (but only for ALL_CAPS settings)
        for setting in dir(global_settings):
            if setting.isupper():
                setattr(self, setting, getattr(global_settings, setting))

        # store the settings module in case someone later cares
        self.SETTINGS_MODULE = settings_module

        mod = importlib.import_module(self.SETTINGS_MODULE)

        tuple_settings = (
            "ALLOWED_HOSTS",
            "INSTALLED_APPS",
            "TEMPLATE_DIRS",
            "LOCALE_PATHS",
            "SECRET_KEY_FALLBACKS",
        )
        self._explicit_settings = set()
        for setting in dir(mod):
            if setting.isupper():
                setting_value = getattr(mod, setting)

                if setting in tuple_settings and not isinstance(
                    setting_value, (list, tuple)
                ):
                    raise ImproperlyConfigured(
                        "The %s setting must be a list or a tuple." % setting
                    )
                setattr(self, setting, setting_value)
                self._explicit_settings.add(setting)

        if self.is_overridden("FORMS_URLFIELD_ASSUME_HTTPS"):
            warnings.warn(
                FORMS_URLFIELD_ASSUME_HTTPS_DEPRECATED_MSG,
                RemovedInDjango60Warning,
            )

        if hasattr(time, "tzset") and self.TIME_ZONE:
            # When we can, attempt to validate the timezone. If we can't find
            # this file, no check happens and it's harmless.
            zoneinfo_root = Path("/usr/share/zoneinfo")
            zone_info_file = zoneinfo_root.joinpath(*self.TIME_ZONE.split("/"))
            if zoneinfo_root.exists() and not zone_info_file.exists():
                raise ValueError("Incorrect timezone setting: %s" % self.TIME_ZONE)
            # Move the time zone info into os.environ. See ticket #2315 for why
            # we don't do this unconditionally (breaks Windows).
            os.environ["TZ"] = self.TIME_ZONE
            time.tzset()

    def is_overridden(self, setting):
        return setting in self._explicit_settings

    def __repr__(self):
        return '<%(cls)s "%(settings_module)s">' % {
            "cls": self.__class__.__name__,
            "settings_module": self.SETTINGS_MODULE,
        }


class UserSettingsHolder:
    """Holder for user configured settings."""

    # SETTINGS_MODULE doesn't make much sense in the manually configured
    # (standalone) case.
    SETTINGS_MODULE = None

    def __init__(self, default_settings):
        """
        Requests for configuration variables not in this class are satisfied
        from the module specified in default_settings (if possible).
        """
        self.__dict__["_deleted"] = set()
        self.default_settings = default_settings

    def __getattr__(self, name):
        if not name.isupper() or name in self._deleted:
            raise AttributeError
        return getattr(self.default_settings, name)

    def __setattr__(self, name, value):
        self._deleted.discard(name)
        if name == "FORMS_URLFIELD_ASSUME_HTTPS":
            warnings.warn(
                FORMS_URLFIELD_ASSUME_HTTPS_DEPRECATED_MSG,
                RemovedInDjango60Warning,
            )
        super().__setattr__(name, value)

    def __delattr__(self, name):
        self._deleted.add(name)
        if hasattr(self, name):
            super().__delattr__(name)

    def __dir__(self):
        return sorted(
            s
            for s in [*self.__dict__, *dir(self.default_settings)]
            if s not in self._deleted
        )

    def is_overridden(self, setting):
        deleted = setting in self._deleted
        set_locally = setting in self.__dict__
        set_on_default = getattr(
            self.default_settings, "is_overridden", lambda s: False
        )(setting)
        return deleted or set_locally or set_on_default

    def __repr__(self):
        return "<%(cls)s>" % {
            "cls": self.__class__.__name__,
        }


settings = LazySettings()
=======
LANG_INFO is a dictionary structure to provide meta information about languages.

About name_local: capitalize it as if your language name was appearing
inside a sentence in your language.
The 'fallback' key can be used to specify a special fallback logic which doesn't
follow the traditional 'fr-ca' -> 'fr' fallback logic.
"""

LANG_INFO = {
    "af": {
        "bidi": False,
        "code": "af",
        "name": "Afrikaans",
        "name_local": "Afrikaans",
    },
    "ar": {
        "bidi": True,
        "code": "ar",
        "name": "Arabic",
        "name_local": "العربيّة",
    },
    "ar-dz": {
        "bidi": True,
        "code": "ar-dz",
        "name": "Algerian Arabic",
        "name_local": "العربية الجزائرية",
    },
    "ast": {
        "bidi": False,
        "code": "ast",
        "name": "Asturian",
        "name_local": "asturianu",
    },
    "az": {
        "bidi": True,
        "code": "az",
        "name": "Azerbaijani",
        "name_local": "Azərbaycanca",
    },
    "be": {
        "bidi": False,
        "code": "be",
        "name": "Belarusian",
        "name_local": "беларуская",
    },
    "bg": {
        "bidi": False,
        "code": "bg",
        "name": "Bulgarian",
        "name_local": "български",
    },
    "bn": {
        "bidi": False,
        "code": "bn",
        "name": "Bengali",
        "name_local": "বাংলা",
    },
    "br": {
        "bidi": False,
        "code": "br",
        "name": "Breton",
        "name_local": "brezhoneg",
    },
    "bs": {
        "bidi": False,
        "code": "bs",
        "name": "Bosnian",
        "name_local": "bosanski",
    },
    "ca": {
        "bidi": False,
        "code": "ca",
        "name": "Catalan",
        "name_local": "català",
    },
    "ckb": {
        "bidi": True,
        "code": "ckb",
        "name": "Central Kurdish (Sorani)",
        "name_local": "کوردی",
    },
    "cs": {
        "bidi": False,
        "code": "cs",
        "name": "Czech",
        "name_local": "česky",
    },
    "cy": {
        "bidi": False,
        "code": "cy",
        "name": "Welsh",
        "name_local": "Cymraeg",
    },
    "da": {
        "bidi": False,
        "code": "da",
        "name": "Danish",
        "name_local": "dansk",
    },
    "de": {
        "bidi": False,
        "code": "de",
        "name": "German",
        "name_local": "Deutsch",
    },
    "dsb": {
        "bidi": False,
        "code": "dsb",
        "name": "Lower Sorbian",
        "name_local": "dolnoserbski",
    },
    "el": {
        "bidi": False,
        "code": "el",
        "name": "Greek",
        "name_local": "Ελληνικά",
    },
    "en": {
        "bidi": False,
        "code": "en",
        "name": "English",
        "name_local": "English",
    },
    "en-au": {
        "bidi": False,
        "code": "en-au",
        "name": "Australian English",
        "name_local": "Australian English",
    },
    "en-gb": {
        "bidi": False,
        "code": "en-gb",
        "name": "British English",
        "name_local": "British English",
    },
    "eo": {
        "bidi": False,
        "code": "eo",
        "name": "Esperanto",
        "name_local": "Esperanto",
    },
    "es": {
        "bidi": False,
        "code": "es",
        "name": "Spanish",
        "name_local": "español",
    },
    "es-ar": {
        "bidi": False,
        "code": "es-ar",
        "name": "Argentinian Spanish",
        "name_local": "español de Argentina",
    },
    "es-co": {
        "bidi": False,
        "code": "es-co",
        "name": "Colombian Spanish",
        "name_local": "español de Colombia",
    },
    "es-mx": {
        "bidi": False,
        "code": "es-mx",
        "name": "Mexican Spanish",
        "name_local": "español de Mexico",
    },
    "es-ni": {
        "bidi": False,
        "code": "es-ni",
        "name": "Nicaraguan Spanish",
        "name_local": "español de Nicaragua",
    },
    "es-ve": {
        "bidi": False,
        "code": "es-ve",
        "name": "Venezuelan Spanish",
        "name_local": "español de Venezuela",
    },
    "et": {
        "bidi": False,
        "code": "et",
        "name": "Estonian",
        "name_local": "eesti",
    },
    "eu": {
        "bidi": False,
        "code": "eu",
        "name": "Basque",
        "name_local": "Basque",
    },
    "fa": {
        "bidi": True,
        "code": "fa",
        "name": "Persian",
        "name_local": "فارسی",
    },
    "fi": {
        "bidi": False,
        "code": "fi",
        "name": "Finnish",
        "name_local": "suomi",
    },
    "fr": {
        "bidi": False,
        "code": "fr",
        "name": "French",
        "name_local": "français",
    },
    "fy": {
        "bidi": False,
        "code": "fy",
        "name": "Frisian",
        "name_local": "frysk",
    },
    "ga": {
        "bidi": False,
        "code": "ga",
        "name": "Irish",
        "name_local": "Gaeilge",
    },
    "gd": {
        "bidi": False,
        "code": "gd",
        "name": "Scottish Gaelic",
        "name_local": "Gàidhlig",
    },
    "gl": {
        "bidi": False,
        "code": "gl",
        "name": "Galician",
        "name_local": "galego",
    },
    "he": {
        "bidi": True,
        "code": "he",
        "name": "Hebrew",
        "name_local": "עברית",
    },
    "hi": {
        "bidi": False,
        "code": "hi",
        "name": "Hindi",
        "name_local": "हिंदी",
    },
    "hr": {
        "bidi": False,
        "code": "hr",
        "name": "Croatian",
        "name_local": "Hrvatski",
    },
    "hsb": {
        "bidi": False,
        "code": "hsb",
        "name": "Upper Sorbian",
        "name_local": "hornjoserbsce",
    },
    "hu": {
        "bidi": False,
        "code": "hu",
        "name": "Hungarian",
        "name_local": "Magyar",
    },
    "hy": {
        "bidi": False,
        "code": "hy",
        "name": "Armenian",
        "name_local": "հայերեն",
    },
    "ia": {
        "bidi": False,
        "code": "ia",
        "name": "Interlingua",
        "name_local": "Interlingua",
    },
    "io": {
        "bidi": False,
        "code": "io",
        "name": "Ido",
        "name_local": "ido",
    },
    "id": {
        "bidi": False,
        "code": "id",
        "name": "Indonesian",
        "name_local": "Bahasa Indonesia",
    },
    "ig": {
        "bidi": False,
        "code": "ig",
        "name": "Igbo",
        "name_local": "Asụsụ Ìgbò",
    },
    "is": {
        "bidi": False,
        "code": "is",
        "name": "Icelandic",
        "name_local": "Íslenska",
    },
    "it": {
        "bidi": False,
        "code": "it",
        "name": "Italian",
        "name_local": "italiano",
    },
    "ja": {
        "bidi": False,
        "code": "ja",
        "name": "Japanese",
        "name_local": "日本語",
    },
    "ka": {
        "bidi": False,
        "code": "ka",
        "name": "Georgian",
        "name_local": "ქართული",
    },
    "kab": {
        "bidi": False,
        "code": "kab",
        "name": "Kabyle",
        "name_local": "taqbaylit",
    },
    "kk": {
        "bidi": False,
        "code": "kk",
        "name": "Kazakh",
        "name_local": "Қазақ",
    },
    "km": {
        "bidi": False,
        "code": "km",
        "name": "Khmer",
        "name_local": "Khmer",
    },
    "kn": {
        "bidi": False,
        "code": "kn",
        "name": "Kannada",
        "name_local": "Kannada",
    },
    "ko": {
        "bidi": False,
        "code": "ko",
        "name": "Korean",
        "name_local": "한국어",
    },
    "ky": {
        "bidi": False,
        "code": "ky",
        "name": "Kyrgyz",
        "name_local": "Кыргызча",
    },
    "lb": {
        "bidi": False,
        "code": "lb",
        "name": "Luxembourgish",
        "name_local": "Lëtzebuergesch",
    },
    "lt": {
        "bidi": False,
        "code": "lt",
        "name": "Lithuanian",
        "name_local": "Lietuviškai",
    },
    "lv": {
        "bidi": False,
        "code": "lv",
        "name": "Latvian",
        "name_local": "latviešu",
    },
    "mk": {
        "bidi": False,
        "code": "mk",
        "name": "Macedonian",
        "name_local": "Македонски",
    },
    "ml": {
        "bidi": False,
        "code": "ml",
        "name": "Malayalam",
        "name_local": "മലയാളം",
    },
    "mn": {
        "bidi": False,
        "code": "mn",
        "name": "Mongolian",
        "name_local": "Mongolian",
    },
    "mr": {
        "bidi": False,
        "code": "mr",
        "name": "Marathi",
        "name_local": "मराठी",
    },
    "ms": {
        "bidi": False,
        "code": "ms",
        "name": "Malay",
        "name_local": "Bahasa Melayu",
    },
    "my": {
        "bidi": False,
        "code": "my",
        "name": "Burmese",
        "name_local": "မြန်မာဘာသာ",
    },
    "nb": {
        "bidi": False,
        "code": "nb",
        "name": "Norwegian Bokmal",
        "name_local": "norsk (bokmål)",
    },
    "ne": {
        "bidi": False,
        "code": "ne",
        "name": "Nepali",
        "name_local": "नेपाली",
    },
    "nl": {
        "bidi": False,
        "code": "nl",
        "name": "Dutch",
        "name_local": "Nederlands",
    },
    "nn": {
        "bidi": False,
        "code": "nn",
        "name": "Norwegian Nynorsk",
        "name_local": "norsk (nynorsk)",
    },
    "no": {
        "bidi": False,
        "code": "no",
        "name": "Norwegian",
        "name_local": "norsk",
    },
    "os": {
        "bidi": False,
        "code": "os",
        "name": "Ossetic",
        "name_local": "Ирон",
    },
    "pa": {
        "bidi": False,
        "code": "pa",
        "name": "Punjabi",
        "name_local": "Punjabi",
    },
    "pl": {
        "bidi": False,
        "code": "pl",
        "name": "Polish",
        "name_local": "polski",
    },
    "pt": {
        "bidi": False,
        "code": "pt",
        "name": "Portuguese",
        "name_local": "Português",
    },
    "pt-br": {
        "bidi": False,
        "code": "pt-br",
        "name": "Brazilian Portuguese",
        "name_local": "Português Brasileiro",
    },
    "ro": {
        "bidi": False,
        "code": "ro",
        "name": "Romanian",
        "name_local": "Română",
    },
    "ru": {
        "bidi": False,
        "code": "ru",
        "name": "Russian",
        "name_local": "Русский",
    },
    "sk": {
        "bidi": False,
        "code": "sk",
        "name": "Slovak",
        "name_local": "slovensky",
    },
    "sl": {
        "bidi": False,
        "code": "sl",
        "name": "Slovenian",
        "name_local": "Slovenščina",
    },
    "sq": {
        "bidi": False,
        "code": "sq",
        "name": "Albanian",
        "name_local": "shqip",
    },
    "sr": {
        "bidi": False,
        "code": "sr",
        "name": "Serbian",
        "name_local": "српски",
    },
    "sr-latn": {
        "bidi": False,
        "code": "sr-latn",
        "name": "Serbian Latin",
        "name_local": "srpski (latinica)",
    },
    "sv": {
        "bidi": False,
        "code": "sv",
        "name": "Swedish",
        "name_local": "svenska",
    },
    "sw": {
        "bidi": False,
        "code": "sw",
        "name": "Swahili",
        "name_local": "Kiswahili",
    },
    "ta": {
        "bidi": False,
        "code": "ta",
        "name": "Tamil",
        "name_local": "தமிழ்",
    },
    "te": {
        "bidi": False,
        "code": "te",
        "name": "Telugu",
        "name_local": "తెలుగు",
    },
    "tg": {
        "bidi": False,
        "code": "tg",
        "name": "Tajik",
        "name_local": "тоҷикӣ",
    },
    "th": {
        "bidi": False,
        "code": "th",
        "name": "Thai",
        "name_local": "ภาษาไทย",
    },
    "tk": {
        "bidi": False,
        "code": "tk",
        "name": "Turkmen",
        "name_local": "Türkmençe",
    },
    "tr": {
        "bidi": False,
        "code": "tr",
        "name": "Turkish",
        "name_local": "Türkçe",
    },
    "tt": {
        "bidi": False,
        "code": "tt",
        "name": "Tatar",
        "name_local": "Татарча",
    },
    "udm": {
        "bidi": False,
        "code": "udm",
        "name": "Udmurt",
        "name_local": "Удмурт",
    },
    "ug": {
        "bidi": True,
        "code": "ug",
        "name": "Uyghur",
        "name_local": "ئۇيغۇرچە",
    },
    "uk": {
        "bidi": False,
        "code": "uk",
        "name": "Ukrainian",
        "name_local": "Українська",
    },
    "ur": {
        "bidi": True,
        "code": "ur",
        "name": "Urdu",
        "name_local": "اردو",
    },
    "uz": {
        "bidi": False,
        "code": "uz",
        "name": "Uzbek",
        "name_local": "oʻzbek tili",
    },
    "vi": {
        "bidi": False,
        "code": "vi",
        "name": "Vietnamese",
        "name_local": "Tiếng Việt",
    },
    "zh-cn": {
        "fallback": ["zh-hans"],
    },
    "zh-hans": {
        "bidi": False,
        "code": "zh-hans",
        "name": "Simplified Chinese",
        "name_local": "简体中文",
    },
    "zh-hant": {
        "bidi": False,
        "code": "zh-hant",
        "name": "Traditional Chinese",
        "name_local": "繁體中文",
    },
    "zh-hk": {
        "fallback": ["zh-hant"],
    },
    "zh-mo": {
        "fallback": ["zh-hant"],
    },
    "zh-my": {
        "fallback": ["zh-hans"],
    },
    "zh-sg": {
        "fallback": ["zh-hans"],
    },
    "zh-tw": {
        "fallback": ["zh-hant"],
    },
}
>>>>>>> 504c6cd67b00ab34ac9ea4af67958c41c4288006
